var searchIndex = JSON.parse('{\
"regexxx":{"doc":"","t":[6,3,12,12,6,6,6,3,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["QId","AutomataRef","q0","f","Transition","DeltaQ","Delta","ANFA","delta","q0","f","new","in_and_fin","expr_0","expr_1","expr_a","concatenate","star","union","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","to_string","borrow","borrow_mut","try_from","try_into","type_id","clone","clone","eq","ne","eq","ne","fmt","fmt","fmt"],"q":["regexxx","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["Unique state id","Reference to automata initial and final states","initial state","final state","Transition is 2nd and 3rd arguments <code>T</code> and <code>State</code> in …","1 or 2 results of δ, optionally labelled. When length is …","Index of Delta is the first argument <code>State</code> in …","Augmented non-deterministic finite automaton","<code>δ ⊆ State × T × State</code> is a labeled transition …","initial state","final state","Returns an ANFA with no state. Must be finalized with …","“Finalizes” ANFA by using initial and final states of …","Returns reference to an acceptor that never transitions …","Returns reference to an acceptor in final state, i.e. …","Returns reference to an automaton accepting the provided …","Concatenates machine references a and b of the same stack","Pushes new states and mutates machine_ref_a states so …","Examples","","","","","","","","","","","","","","","","","","","","","","","","","","","","Formats an ANFA implmentation as a formal definition"],"i":[0,0,1,1,0,0,0,0,2,2,2,2,2,2,2,2,2,2,2,1,1,1,1,1,1,1,1,1,2,2,2,2,2,2,2,2,2,2,1,2,1,1,2,2,1,2,2],"f":[null,null,null,null,null,null,null,null,null,null,null,[[],["anfa",3]],[[["automataref",3]],[["str",15],["result",4]]],[[],[["result",4],["automataref",3],["str",15]]],[[],[["result",4],["automataref",3],["str",15]]],[[["char",15]],[["result",4],["automataref",3],["str",15]]],[[["automataref",3]],[["result",4],["automataref",3],["str",15]]],[[["automataref",3]],[["result",4],["automataref",3],["str",15]]],[[["automataref",3]],[["result",4],["automataref",3],["str",15]]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[],["string",3]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["automataref",3]],[[],["anfa",3]],[[["automataref",3]],["bool",15]],[[["automataref",3]],["bool",15]],[[["anfa",3]],["bool",15]],[[["anfa",3]],["bool",15]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]]],"p":[[3,"AutomataRef"],[3,"ANFA"]]}\
}');
initSearch(searchIndex);