var searchIndex = JSON.parse('{\
"regexxx":{"doc":"","t":[6,6,6,6,0,3,3,11,11,11,11,11,12,11,11,11,11,11,12,12,11,11,11,11,11,11,11,11,11,11,12,12,11,11,11,11,11,11,11,11],"n":["Delta","DeltaQ","QId","Transition","anfa","ANFA","AutomataRef","borrow","borrow","borrow_mut","borrow_mut","concatenate","delta","eq","eq","expr_0","expr_1","expr_a","f","f","fmt","fmt","from","from","in_and_fin","into","into","ne","ne","new","q0","q0","star","try_from","try_from","try_into","try_into","type_id","type_id","union"],"q":["regexxx","","","","","regexxx::anfa","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["Index of Delta is the first argument <code>State</code> in …","1 or 2 results of δ, optionally labelled. When length is …","Unique state id","Transition is 2nd and 3rd arguments <code>T</code> and <code>State</code> in …","","Augmented non-deterministic finite automaton","Reference to automata initial and final states","","","","","Concatenates machine references a and b of the same stack","<code>δ ⊆ State × T × State</code> is a labeled transition …","","","Returns reference to an acceptor that never transitions to …","Returns reference to an acceptor in final state, i.e. …","Returns reference to an automaton accepting the provided …","final state","final state","","","","","“Finalizes” ANFA by using initial and final states of …","","","","","Returns an ANFA with no state. Must be finalized with …","initial state","initial state","Pushes new states and mutates machine_ref_a states so that …","","","","","","","Examples"],"i":[0,0,0,0,0,0,0,1,2,1,2,2,2,1,2,2,2,2,1,2,1,2,1,2,2,1,2,1,2,2,1,2,2,1,2,1,2,1,2,2],"f":[null,null,null,null,null,null,null,[[]],[[]],[[]],[[]],[[["automataref",3]],[["result",4,["automataref","str"]],["automataref",3],["str",15]]],null,[[["automataref",3]],["bool",15]],[[["anfa",3]],["bool",15]],[[],[["result",4,["automataref","str"]],["automataref",3],["str",15]]],[[],[["result",4,["automataref","str"]],["automataref",3],["str",15]]],[[["char",15]],[["result",4,["automataref","str"]],["automataref",3],["str",15]]],null,null,[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[["automataref",3]],[["result",4,["str"]],["str",15]]],[[]],[[]],[[["automataref",3]],["bool",15]],[[["anfa",3]],["bool",15]],[[],["anfa",3]],null,null,[[["automataref",3]],[["result",4,["automataref","str"]],["automataref",3],["str",15]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[["automataref",3]],[["result",4,["automataref","str"]],["automataref",3],["str",15]]]],"p":[[3,"AutomataRef"],[3,"ANFA"]]}\
}');
if (window.initSearch) {window.initSearch(searchIndex)};